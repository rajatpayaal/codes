import java.io.*;

class Combination {
	static void combinationUtil(int arr[], int data[], int start,
								int end, int index, int r)
	{
		if (index == r)
		{
			for (int j=0; j<r; j++)
				System.out.print(data[j]+" ");
			System.out.println("");
			return;
		}

		for (int i=start; i<=end && end-i+1 >= r-index; i++)
		{
			data[index] = arr[i];
			combinationUtil(arr, data, i+1, end, index+1, r);
		}
	}

	static void printCombination(int arr[], int n, int r)
	{

	}

	public static void main (String[] args) {
		int arr[] = {1, 2};
		int r = 3;
		int n = arr.length;
		printCombination(arr, n, r);
	}
}



// next solution 

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
 
class Main
{
  
    public static void findCombinations(int[] A, int i, int k,
                                        Set<List<Integer>> subarrays,
                                        List<Integer> out)
    {

        if (A.length == 0 || k > A.length) {
            return;
        }
 
    
        if (k == 0) {
            subarrays.add(new ArrayList<>(out));
            return;
        }
 

        for (int j = i; j < A.length; j++)
        {
 
            out.add(A[j]);
            findCombinations(A, j + 1, k - 1, subarrays, out);
            out.remove(out.size() - 1);        // backtrack
        }
    }
 
    public static Set<List<Integer>> findCombinations(int[] A, int k)
    {
        Set<List<Integer>> subarrays = new HashSet<>();
        findCombinations(A, 0, k, subarrays, new ArrayList<>());
        return subarrays;
    }
 
    public static void main(String[] args)
    {
        int[] A = { 1, 2, 3 };
        int k = 2;
 
    
        System.out.println(findCombinations(A, k));
    }
}

